====================================================3 Tier Architecture Deployment in AWS=================================================================

1. eksctl create cluster --name demo-cluster-eks --region us-east-1

2. Check whether the cluster is already created in AWS console or create a new cluster

3. export cluster_name=demo-cluster-eks    # Export that cluster to here

4. oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)

5. aws iam list-open-id-connect-providers | grep $oidc_id | cut -d "/" -f4 #To check whether an IAM odc is already created.

Output till here:

sriram@sriram-VirtualBox:~$ oidc_id=$(aws eks describe-cluster --name $cluster_name --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)
sriram@sriram-VirtualBox:~$ aws iam list-open-id-connect-providers | grep $oidc_id | cut -d "/" -f4
sriram@sriram-VirtualBox:~$ eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve
2024-04-28 23:02:54 [ℹ]  will create IAM Open ID Connect provider for cluster "demo-cluster-eks" in "us-east-1"
2024-04-28 23:02:55 [✔]  created IAM Open ID Connect provider for cluster "demo-cluster-eks" in "us-east-1"
sriram@sriram-VirtualBox:~$ 

6. Now proceed to alb configuration, because you want to explore this application to the external world.

To create alb controller, you have to create an IAM policy first.

curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json  

# To Download IAM Policy

aws iam create-policy \
    --policy-name AWSLoadBalancerControllerIAMPolicy \
    --policy-document file://iam_policy.json

Creating IAM Policy


eksctl create iamserviceaccount \
  --cluster=demo-cluster-eks \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::2111-2570-5638:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve


By above steps, we are trying to create a service account for the alb controller. Once it is donewe will add helm chart to this alb controllerand will install.


output:

sriram@sriram-VirtualBox:~$ eksctl create iamserviceaccount   --cluster=demo-cluster-eks   --namespace=kube-system   --name=aws-load-balancer-controller   --role-name AmazonEKSLoadBalancerControllerRole   --attach-policy-arn=arn:aws:iam::211125705638:policy/AWSLoadBalancerControllerIAMPolicy   --approve
2024-04-28 23:21:16 [ℹ]  1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)
2024-04-28 23:21:16 [!]  serviceaccounts that exist in Kubernetes will be excluded, use --override-existing-serviceaccounts to override
2024-04-28 23:21:16 [ℹ]  1 task: { 
    2 sequential sub-tasks: { 
        create IAM role for serviceaccount "kube-system/aws-load-balancer-controller",
        create serviceaccount "kube-system/aws-load-balancer-controller",
    } }2024-04-28 23:21:16 [ℹ]  building iamserviceaccount stack "eksctl-demo-cluster-eks-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-04-28 23:21:16 [ℹ]  deploying stack "eksctl-demo-cluster-eks-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-04-28 23:21:16 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-eks-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-04-28 23:21:47 [ℹ]  waiting for CloudFormation stack "eksctl-demo-cluster-eks-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2024-04-28 23:21:47 [ℹ]  created serviceaccount "kube-system/aws-load-balancer-controller"



7. helm repo add eks https://aws.github.io/eks-charts # to add the helm repo


8. Install the helm:

helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=demo-cluster-eks --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --set region=us-east-1 --set vpcId=vpc-0b8737cc292082a1c


9. Create EBS CSI PLugin:

eksctl create iamserviceaccount \
    --name ebs-csi-controller-sa \
    --namespace kube-system \
    --cluster demo-cluster-eks \
    --role-name AmazonEKS_EBS_CSI_DriverRole \
    --role-only \
    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
    --approve

10. eksctl create addon --name aws-ebs-csi-driver --cluster demo-cluster-eks --service-account-role-arn arn:aws:iam::211125705638:role/AmazonEKS_EBS_CSI_DriverRole --force


Now, only thing is we have to deploy all this project as a helm chart


11. Create a name space,

kubectl create ns robot-shop


12. Go to the directory where the helm directory is present, create a Chart.yaml with contents and then run with;


helm install robot-shop --namespace robot-shop .

output is :

sriram@sriram-VirtualBox:~/.config/helm$ helm install robot-shop --namespace robot-shop .
NAME: robot-shop
LAST DEPLOYED: Mon Apr 29 01:44:02 2024
NAMESPACE: robot-shop
STATUS: deployed
REVISION: 1
TEST SUITE: None
sriram@sriram-VirtualBox:~/.config/helm$ 


13. To check the pods on helm:

kubectl get pods -n robot-shop

Wait for all the pods to be up and running.

14. To check the cluster IP and Port number 

kubectl get svc

kubectl get svc -n robot-shop ==> To get the cluster IP of all services of robot-shop

There are 2 ways to expose the application to external world 1. Load balancer type service, 2. Ingress based services. Ingress is the most commonly used one.


15. Now apply the ingress controller,

kubectl apply -f ingress.yaml

16. To check whether ingress is created:

kubectl get ingress -n robot-shop

*In realtime, each micro-service has separate CI/CD pipeline.

17. Now, copy the DNS name of the Load Balancer after it turns to Active, and our robot-shop application is successfully accessed by the public IP from browser.

18. Finally delete the cluster using the following command:

It will delete the entire cluster with all the components

eksctl delete cluster --name demo-cluster-eks --region us-east-1







